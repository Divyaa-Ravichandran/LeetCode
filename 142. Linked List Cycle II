

URL: https://leetcode.com/problems/linked-list-cycle-ii/



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = None
        fast = head
        found = None
        while fast and fast.next:
            if slow == fast and slow:
                found = fast
                break
            slow = slow.next if slow else fast.next
            fast = fast.next.next
        
        slow = head
        ans = None
        while slow and found:
            if found == slow:
                ans = found
                break
            slow = slow.next
            found = found.next
        return ans
        
