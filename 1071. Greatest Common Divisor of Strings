URL:  https://leetcode.com/problems/greatest-common-divisor-of-strings/description/?envType=study-plan-v2&envId=leetcode-75


class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        if len(str1) < len(str2):
            str1, str2 = str2, str1
        if str1 == str2:
            return str1
        if str1[:len(str2)] != str2:
            return ""
        return self.gcdOfStrings(str1[len(str2):], str2)


Approach
The approach is to use a recursive function gcdOfStrings that checks if the prefix of str1 equal to the length of str2 is equal to str2. If it is, it continues the recursion with the remaining part of str1 and str2. If it's not, it returns an empty string. If the length of str1 is less than str2, it swaps str1 and str2 before starting the recursion. If str1 is equal to str2, it returns str1.

Let's consider the following example to understand the approach:

str1 = "ABCABCABC"

str2 = "ABCABC"

First, we check if str1 is less than str2, if yes, we swap str1 and str2.
Next, we check if str1 is equal to str2. If yes, we return str1. In this case, it's not, so we move forward.
We take the prefix of str1 equal to the length of str2. If it's equal to str2, we continue the recursion with the remaining part of str1 and str2. str1 = "ABCABCABC" str2 = "ABCABC"
Prefix of str1 equal to the length of str2 = "ABCABC"
Since it's equal to str2, we continue the recursion with the remaining part of str1 and str2. str1 = "ABC" str2 = "ABCABC"
Prefix of str1 equal to the length of str2 = "ABC"
Since it's equal to str2, we continue the recursion with the remaining part of str1 and str2. str1 = "" str2 = "ABCABC"
Since str1 is empty, we return str2, which is the largest string x that divides both str1 and str2.
