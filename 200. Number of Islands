

URL:   https://leetcode.com/problems/number-of-islands/description/


------------------------BFS-----------------------------------

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
 
        visited = set()
        ilands  = 0
        directions = [(0,1),(1,0),(-1,0),(0,-1)]
        
        def bfs(pt1,pt2):
            q = deque()
            q.append((pt1,pt2))
            visited.add((pt1,pt2))
            while q:
                x,y = q.popleft()
                for dr,dc in directions:
                    row = x + dr
                    col = y + dc
                    if (row in range(len(grid)) and col in range(len(grid[0]))) and ((row,col) not in visited and grid[row][col] == "1"):
                        q.append((row,col))
                        visited.add((row,col))

        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if (i,j) not in visited and grid[i][j] == "1":
                    bfs(i,j)
                    ilands += 1
        
        return ilands
        
        
        
        
        
        
   ------------------ DFS ----------------------------

 class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        self.grid = grid
        count = 0
        for row in range(0, len(grid)):
            for col in range(0, len(grid[0])):
                if (grid[row][col] == '1'):
                    count += 1
                    self.dfs(row, col)
        return count
    
    def dfs(self, row, col):
        if (self.isValid(row, col)):
            self.grid[row][col] = '2'
            self.dfs(row - 1, col)
            self.dfs(row + 1, col)
            self.dfs(row, col - 1)
            self.dfs(row, col + 1)
    
    def isValid(self, row, col):
        if (row < 0 or row >= len(self.grid)):
            return False
        if (col < 0 or col >= len(self.grid[0])):
            return False
        
        if self.grid[row][col] == '1':
            return True
        return False
        
        
