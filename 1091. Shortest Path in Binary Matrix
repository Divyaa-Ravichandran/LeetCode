
URL:  https://leetcode.com/problems/shortest-path-in-binary-matrix/description/


class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        #BFS
        
        n=len(grid)
        q=deque([(0,0,1)]) #r,c,length
        direct=[[0,1],[0,-1],[1,0],[-1,0],
        [1,1],[1,-1],[-1,1],[-1,-1]] # having all 8 directions
        visit=set((0,0))

        while q:
            r,c,length = q.popleft()
            if min(r,c)<0 or max(r,c)>=n or grid[r][c]==1:
                continue # valid column or row
            if r==n-1 and c==n-1:# reached destination
                return length

            for dr,dc  in direct: # checking if the place visited or not
                if (r+dr,c+dc) not in visit:
                    q.append((r+dr,c+dc,length+1))
                    visit.add((r+dr,c+dc))

        return -1  # if not pssible

        #time complexity: O(n*n)
