URL: https://leetcode.com/problems/product-of-array-except-self/



class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n=len(nums)
        if len(nums) == 1:
            print(0)
            return 0
 
        i, temp = 1, 1
 
    # Allocate memory for the product array
        prod = [1 for i in range(n)]
 
    # Initialize the product array as 1
 
    # In this loop, temp variable contains product of
    # elements on left side excluding arr[i]
        for i in range(n):
            prod[i] = temp
            temp *= nums[i]
 
    # Initialize temp to 1 for product on right side
        temp = 1
 
    # In this loop, temp variable contains product of
    # elements on right side excluding arr[i]
        for i in range(n - 1, -1, -1):
            prod[i] *= temp
            temp *= nums[i]
 
    # Print the constructed prod array
        for i in range(n):
            print(prod[i], end=" ")
 
        return prod
        
        
        
        
        
        
OR


class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:

        before=[1]*len(nums)
        after=[1]*len(nums)
        prod = [1 for i in range(len(nums))]

        for i in range(1,len(nums)):
            before[i]=before[i-1]*nums[i-1]
        for i in range(len(nums)-2,-1,-1):
            after[i]=after[i+1]*nums[i+1]
        for i in range(0,len(nums)):
            prod[i]=before[i]*after[i]

        return prod
        
        
        
 OR
 
 
        
        n = len(nums)
        left = [1]
        for i in range(1, n):
            left.append(left[i-1]*nums[i-1])
        
        right = [1]*(n+1)
        for i in range(n-2, -1, -1):
            right[i] = right[i+1]*nums[i+1]
        
        output = []
        for i in range(n):
            output.append(left[i]*right[i])
        
        return output

